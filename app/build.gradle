import com.android.builder.model.ProductFlavor
apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
//快速打包
apply plugin: 'com.antfortune.freeline'
//路由框架
apply plugin: 'com.chenenyu.router'
//渠道配置文件
apply from: "../channels.gradle"


android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    //忽略图片检测
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    //默认的配置
    defaultConfig {
        applicationId "com.tcl.base"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
    }

    //配置release版本和debug版本的签名
    signingConfigs {
        release {
            keyAlias rootProject.ext.signingConfig.keyAlias
            keyPassword rootProject.ext.signingConfig.keyPassword
            storeFile file(rootProject.ext.signingConfig.storeFile)
            storePassword rootProject.ext.signingConfig.storePassword
        }
        debug {
            keyAlias rootProject.ext.signingConfig.keyAlias
            keyPassword rootProject.ext.signingConfig.keyPassword
            storeFile file(rootProject.ext.signingConfig.storeFile)
            storePassword rootProject.ext.signingConfig.storePassword
        }
    }


    buildTypes {

        debug {
            //true：启用混淆,false:不启用
            minifyEnabled false
            //是否清理无用资源
            shrinkResources false
            //是否启用zipAlign压缩
            zipAlignEnabled false
            //签名配置
            signingConfig signingConfigs.release
            //可以在Android代码中使用（BuildConfig）
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "int", "ENVIRONMENT", "2"
            debuggable true
        }

        release {
            //true：启用混淆,false:不启用
            minifyEnabled true
            //是否清理无用资源
            shrinkResources true
            //是否启用zipAlign压缩
            zipAlignEnabled true
            //签名配置
            signingConfig signingConfigs.release
            //可以在Android代码中使用（BuildConfig）
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions{
        exclude '*.apk'
    }
    dexOptions {
        jumboMode true
        incremental false
        preDexLibraries = false
    }
    lintOptions{
        abortOnError false
    }

    //可以使用dataBinding
    dataBinding {
        enabled = true
    }
    //使用java8
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    freeline {
        hack true
        productFlavor 'dev'   //多渠道打包时加入此项
        applicationProxy false
    }

    //如果你的项目是用了分包的，multiDexEnabled true ，需要app的build.gradle加上
    afterEvaluate {
        project.tasks.each { task ->
            if (task.name.startsWith('collect') && task.name.endsWith('MultiDexComponents')) {
                println "main-dex-filter: found task $task.name"
                task.filter { name, attrs ->
                    def componentName = attrs.get('android:name')
                    if ('activity'.equals(name)) {
                        println "main-dex-filter: skipping, detected activity [$componentName]"
                        return false
                    } else {
                        println "main-dex-filter: keeping, detected $name [$componentName]"
                        return true
                    }
                }
            }
        }
    }


    //加快构建速度,取消不必要的任务
    tasks.whenTaskAdded { task ->
        if (task.name.contains("lint")
                ||task.name.equals("clean")
                ||task.name.contains("Aidl")
                ||task.name.contains("mockableAndroidJar")
                ||task.name.contains("UnitTest")
                ||task.name.contains("AndroidTest")
                || task.name.contains("Ndk")
                || task.name.contains("Jni")
        ) {
            task.enabled = false
        }
    }

// 解决build警告：编码GBK的不可映射字符
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    //打包apk
    applicationVariants.all { variant ->

        //渠道循环,渠道信息在channels.properties文件中进行配置
        for(ProductFlavor productFlavor:variant.productFlavors){
            //buildTypes循环
            variant.outputs.each { output ->
                //apk的输出路径
                String path = output.outputFile.parent+ "/${productFlavor.name}" + "/${variant.buildType.name}";
                //apk的名字
                String name = "${variant.versionName}_${productFlavor.name}.apk".toLowerCase();
                output.outputFile = new File(path,name)
            }
        }
    }

}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

//可以根据需求进行删减
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //constraint-layout布局
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //appcompat兼容库
    compile 'com.android.support:appcompat-v7:25.0.0'
    //Recyclerview，替代ListView
    compile 'com.android.support:recyclerview-v7:25.0.0'
    //rxjava 和 rxandroid
    compile 'io.reactivex.rxjava2:rxjava:2.0.7'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    //Retrofit2所需要的包
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    //Retrofit2支持rxjava
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    //ConverterFactory的Gson依赖包
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    //ConverterFactory的String依赖包
    compile 'com.squareup.retrofit2:converter-scalars:2.2.0'
    //OKhttp
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    //OKhttp日志拦截
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    //图片加载
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //工具类
    compile 'com.blankj:utilcode:1.3.4'
    //终极分辨率适配方案
    //compile 'com.zhy:autolayout:1.4.5'
    compile(name: 'autolayout-release', ext: 'aar')
    //进度条
    compile 'com.pnikosis:materialish-progress:1.7'
    //万能适配器(https://github.com/byteam/SuperAdapter)
    compile 'org.byteam.superadapter:superadapter:3.6.7'
  //leakcanary(检测内存泄露，最总版本可以去掉)
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

}
